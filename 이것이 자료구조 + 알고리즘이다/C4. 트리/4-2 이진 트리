#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
	struct Node* Left;
	struct Node* Right;

	char data;
}Node;

Node* Create_Node(char NewData) {

	Node* NewNode = (Node*)malloc(sizeof(Node));
	NewNode->Left = NULL;
	NewNode->Right = NULL;
	NewNode->data = NewData;

	return NewNode;
}

void Destroy_Node(Node* Node) {
	free(Node);
}

//전위 순회
void PreorderPrintTree(Node* Node) {

	if (Node == NULL) return;

	printf(" %c", Node->data);

	PreorderPrintTree(Node->Left);

	PreorderPrintTree(Node->Right);
}

//중위 순회
void InorderPrintTree(Node* Node) {

	if (Node == NULL) return;

	InorderPrintTree(Node->Left);

	printf(" %c", Node->data);

	InorderPrintTree(Node->Right);
}

//후위 순회
void PostorderPrintTree(Node* Node) {

	if (Node == NULL) return;

	PostorderPrintTree(Node->Left);

	PostorderPrintTree(Node->Right);

	printf(" %c", Node->data);
}

void Destroy_Tree(Node* Node) {

	if (Node == NULL) return;

	Destroy_Tree(Node->Left);

	Destroy_Tree(Node->Right);

	Destroy_Node(Node);
}

int main(void) {

	Node* A = Create_Node('A');
	Node* B = Create_Node('B');
	Node* C = Create_Node('C');
	Node* D = Create_Node('D');
	Node* E = Create_Node('E');
	Node* F = Create_Node('F');
	Node* G = Create_Node('G');
	
	A->Left = B;
	B->Left = C;
	B->Right = D;

	A->Right = E;
	E->Left = F;
	E->Right = G;

	printf("Preorder ...\n");
	PreorderPrintTree(A);
	printf("\n\n");

	printf("Inorder ... \n");
	InorderPrintTree(A);
	printf("\n\n");


	printf("Postorder ... \n");
	PostorderPrintTree(A);
	printf("\n");

	Destroy_Tree(A);

	return 0;
}
