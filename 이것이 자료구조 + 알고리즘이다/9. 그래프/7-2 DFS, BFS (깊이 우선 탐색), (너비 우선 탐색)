#include <stdio.h>
#include <stdlib.h>

enum VisitMode { Visited, NotVisited };

typedef int VElementType;

typedef struct Node {
	Vertex* A;
	struct Node* NextNode;
}Node;

typedef struct LinkedQueue {
	Node* Front;
	Node* Rear;
};

typedef struct Vertex {
	VElementType Data;
	int Visited;
	int Index;

	struct Vertex* Next;
	struct Edge* AdjacencyList;
}Vertex;

typedef struct Edge {
	int Weight;
	struct Edge* Next;
	Vertex* From;
	Vertex* Target;
}Edge;

typedef struct Graph {
	Vertex* Vertices;
	int VertexCount;
}Graph;

Graph* CreateGraph();
void DestroyGraph(Graph* G);

Vertex* CreateVertex(VElementType Data);
void DestroyVertex(Vertex* V);

Edge* CreateEdge(Vertex* From, Vertex* Target, int Weight);
void DestroyEdge(Edge* E);

void AddVertex(Graph* G, Vertex* V);
void AddEdge(Vertex* V, Edge* E);
void PrintGraph(Graph* G);

void DFS(Vertex* V);
void BFS(Vertex* V, LinkedQueue* Queue);

void Enqueue();
void Dequeue();
int IsEmpty();

int main(void) {

	int Mode = 0;
	Graph* G = CreateGraph();

	Vertex* V1 = CreateVertex('1');
	Vertex* V2 = CreateVertex('2');
	Vertex* V3 = CreateVertex('3');
	Vertex* V4 = CreateVertex('4');
	Vertex* V5 = CreateVertex('5');
	Vertex* V6 = CreateVertex('6');
	Vertex* V7 = CreateVertex('7');

	AddVertex(G, V1);
	AddVertex(G, V2);
	AddVertex(G, V3);
	AddVertex(G, V4);
	AddVertex(G, V5);
	AddVertex(G, V6);
	AddVertex(G, V7);

	AddEdge(V1, CreateEdge(V1, V2, 0));
	AddEdge(V1, CreateEdge(V1, V3, 0));

	AddEdge(V2, CreateEdge(V2, V4, 0));
	AddEdge(V2, CreateEdge(V2, V5, 0));

	AddEdge(V3, CreateEdge(V3, V4, 0));
	AddEdge(V3, CreateEdge(V3, V6, 0));

	AddEdge(V4, CreateEdge(V4, V5, 0));
	AddEdge(V4, CreateEdge(V4, V7, 0));

	AddEdge(V5, CreateEdge(V5, V7, 0));

	AddEdge(V6, CreateEdge(V6, V7, 0));

	printf("Enter Traversal Mode (0: DFS, 1:BFS) : ");
	scanf_s("%d", &Mode);

	if (Mode == 0) DFS(G->Vertices);
	else {
		LinkedQueue* Queue = NULL;
		CreateQueue(&Queue);

		BFS(V1, Queue);

		DestroyQueue(Queue);
	}

	DestroyGraph(G);

	return 0;
}

Graph* CreateGraph() {

	Graph* graph = (Graph*)malloc(sizeof(Graph));
	graph->Vertices = NULL;
	graph->VertexCount = 0;

	return graph;
}

void DestroyGraph(Graph* G) {

	while (G->Vertices != NULL) {
		Vertex* Vertices = G->Vertices->Next;
		DestroyVertex(G->Vertices);
		G->Vertices = Vertices;
	}

	free(G);
}

Vertex* CreateVertex(VElementType Data) {

	Vertex* V = (Vertex*)malloc(sizeof(Vertex));

	V->Data = Data;
	V->Next = NULL;
	V->AdjacencyList = NULL;
	V->Visited = NotVisited;
	V->Index = -1;

	return V;
}

void DestroyVertex(Vertex* V) {

	while (V->AdjacencyList != NULL) {
		Edge* Edge = V->AdjacencyList->Next;

		DestroyEdge(V->AdjacencyList);

		V->AdjacencyList = Edge;
	}

	free(V);
}

Edge* CreateEdge(Vertex* From, Vertex* Target, int Weight) {

	Edge* E = (Edge*)malloc(sizeof(Edge));
	E->From = From;
	E->Target = Target;
	E->Next = NULL;
	E->Weight = Weight;

	return E;
}

void DestroyEdge(Edge* E) {
	free(E);
}

void AddVertex(Graph* G, Vertex* V) {

	Vertex* VertexList = G->Vertices;

	if (VertexList == NULL) {
		G->Vertices = V;
	}
	else {
		while (VertexList->Next != NULL) {
			VertexList = VertexList->Next;
		}

		VertexList->Next = V;
	}

	V->Index = G->VertexCount++;
}

void AddEdge(Vertex* V, Edge* E) {

	if (V->AdjacencyList == NULL) V->AdjacencyList = E;
	else {
		Edge* AdjacencyList = V->AdjacencyList;

		while (AdjacencyList->Next != NULL) {
			AdjacencyList = AdjacencyList->Next;
		}

		AdjacencyList->Next = E;
	}
}

void PrintGraph(Graph* G) {

	Vertex* V = NULL;
	Edge* E = NULL;

	V = G->Vertices;

	if (V == NULL) return;

	while (V != NULL) {
		printf("%c : ", V->Data);

		E = V->AdjacencyList;

		if (E == NULL) {
			V = V->Next;
			printf("\n");
			continue;
		}

		while (E != NULL) {
			printf("%c[%d] ", E->Target->Data, E->Weight);
			E = E->Next;
		}

		printf("\n");

		V = V->Next;
	}

	printf("\n");
}

void CreateQueue(LinkedQueue** Queue) {

	(*Queue) = (LinkedQueue*)malloc(sizeof(LinkedQueue));

	(*Queue)->Front = NULL;
	(*Queue)->Rear = NULL;
}

Node* CreateNode(Vertex* V) {

	Node* NewNode = (Node*)malloc(sizeof(Node));

	NewNode->A = NULL;
	NewNode->NextNode = NULL;

	return NewNode;
}

void Enqueue(LinkedQueue* Queue, Node* NewNode) {

	if (Queue->Front == NULL) {
		Queue->Front = NewNode;
		Queue->Rear = NewNode;
	}
	else {
		Queue->Rear->NextNode = NewNode;
		Queue->Rear = NewNode;
	}
}

void DFS(Vertex* V) {

	Edge* E = NULL;

	printf("%d ", V->Data);

	V->Visited = Visited;

	E = V->AdjacencyList;

	while (E != NULL) {
		if (E->Target != NULL && E->Target->Visited == NotVisited) DFS(E->Target);

		E = E->Next;
	}
}

void BFS(Vertex* V, LinkedQueue* Queue) {
	Edge* E = NULL;

	printf("%d ", V->Data);
	V->Visited = Visited;

	Enqueue(Queue, CreateNode(V));

	while (!IsEmpty(Queue)) {
		Node* Popped = Dequeue(Queue);
		V = Popped->Data;
		E = V->AdjacencyList;

		while (E != NULL) {
			V = E->Target;

			if (V != NULL && V->Visited == NotVisited) {
				printf("%d ", V->Data);
				V->Visited = Visited;
				Enqueue(Queue, CreateNode(V));
			}

			E = E->Next;
		}
	}
}
