#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef char* KeyType;
typedef char* ValueType;

enum ElementStatus {
	EMPTY = 0,
	OCCUPIED = 1
};

typedef struct ElementType {
	KeyType Key;
	ValueType Value;

	enum ElementStatus Status;
}ElementType;

typedef struct HashTable {
	int OccupiedCount;
	int TableSize;

	ElementType* Table;
}HashTable;

HashTable* CreateHashTable(int TableSize);
void DestroyHashTable(HashTable* HT);
void ClearElement(ElementType* Element);

void _Set(HashTable** HT, KeyType Key, ValueType Value);
ValueType _Get(HashTable* HT, KeyType Key);
int _Hash(KeyType Key, int KeyLength, int TableSize);
int _Hash_2(KeyType Key, int KeyLength, int TableSize);

void _Rehash(HashTable** HT);


int main(void) {

	HashTable* HT = CreateHashTable(11);

	_Set(&HT, "MSFT", "Microsoft Corporation");
	_Set(&HT, "JAVA", "Sun Microsystems");
	_Set(&HT, "REDH", "Red Hat Linux");
	_Set(&HT, "APAC", "Apache Org");
	_Set(&HT, "ZYMZZ", "Unisys Ops Check");
	_Set(&HT, "IBM", "IBM Ltd");
	_Set(&HT, "ORCL", "Oracle Corporation");
	_Set(&HT, "CSCO", "Cisco Systems, Inc.");
	_Set(&HT, "GOOG", "Google Inc.");
	_Set(&HT, "YHOO", "Yahoo! Inc.");
	_Set(&HT, "NOVL", "Novell, Inc.");

	printf("\n");

	printf("Key: %s, Value: %s\n", "MSFT", _Get(HT, "MSFT"));
	printf("Key: %s, Value: %s\n", "REDH", _Get(HT, "REDH"));
	printf("Key: %s, Value: %s\n", "APAC", _Get(HT, "APAC"));
	printf("Key: %s, Value: %s\n", "ZYMZZ", _Get(HT, "ZYMZZ"));
	printf("Key: %s, Value: %s\n", "JAVA", _Get(HT, "JAVA"));
	printf("Key: %s, Value: %s\n", "IBM", _Get(HT, "IBM"));
	printf("Key: %s, Value: %s\n", "ORCL", _Get(HT, "ORCL"));
	printf("Key: %s, Value: %s\n", "CSCO", _Get(HT, "CSCO"));
	printf("Key: %s, Value: %s\n", "GOOG", _Get(HT, "GOOG"));
	printf("Key: %s, Value: %s\n", "YHOO", _Get(HT, "YHOO"));
	printf("Key: %s, Value: %s\n", "NOVL", _Get(HT, "NOVL"));

	DestroyHashTable(HT);

	return 0;
}

HashTable* CreateHashTable(int TableSize) {

	HashTable* HT = (HashTable*)malloc(sizeof(HashTable));
	HT->Table = (ElementType*)malloc(sizeof(ElementType) * TableSize);

	memset(HT->Table, 0, sizeof(ElementType) * TableSize);

	HT->TableSize = TableSize;
	HT->OccupiedCount = 0;

	return HT;
}

void _Set(HashTable** HT, KeyType Key, ValueType Value) {

	int KeyLen = 0, Address = 0, StepSize = 0;
	double Usage = 0;

	Usage = (double)(*HT)->OccupiedCount / (*HT)->TableSize;

	if (Usage > 0.5) _Rehash(HT);

	KeyLen = strlen(Key);
	Address = _Hash(Key, KeyLen, (*HT)->TableSize);
	StepSize = _Hash2(Key, KeyLen, (*HT)->TableSize);

	while ((*HT)->Table[Address].Status != EMPTY && strcmp((*HT)->Table[Address].Key, Key) != 0) {
		printf("Collision occured! : Key{%s), Address(%d), StepSize(%d)\n", Key, Address, StepSize);

		Address = (Address + StepSize) % (*HT)->TableSize;
	}

	(*HT)->Table[Address].Key = (char*)malloc(sizeof(char) * (KeyLen + 1));
	strcpy((*HT)->Table[Address].Value, Value);

	(*HT)->Table[Address].Status = OCCUPIED;

	(*HT)->OccupiedCount++;

	printf("Key(%s) entered at address(%d)\n", Key, Address);
}

ValueType _Get(HashTable* HT, KeyType Key) {

	int KeyLen = strlen(Key);

	int Address = _Hash(Key, KeyLen, HT->TableSize);
	int StepSize = _Hash2(Key, KeyLen, HT->TableSize);

	while (HT->Table[Address].Status != EMPTY && strcmp(HT->Table[Address].Key, Key) != 0) {
		Address = (Address + StepSize) % HT->TableSize;
	}

	return HT->Table[Address].Value;
}

void ClearElement(ElementType* Element) {

	if (Element->Status == EMPTY) return;

	free(Element->Key);
	free(Element->Value);
}

void DestroyHashTable(HashTable* HT) {

	for (int i = 0; i < HT->TableSize; i++) {
		ClearElement(&(HT->Table[i]));
	}

	free(HT->Table);
	free(HT);
}

int _Hash(KeyType Key, int KeyLength, int TableSize) {

	int HashValue = 0;

	for (int i = 0; i < KeyLength; i++) {
		HashValue = (HashValue << 3) + Key[i];
	}

	HashValue = HashValue % TableSize;

	return HashValue;
}

int _Hash2(KeyType Key, int KeyLength, int TableSize) {

	int HashValue = 0;

	for (int i = 0; i < KeyLength; i++) {
		HashValue = (HashValue << 2) + Key[i];
	}

	HashValue = HashValue % (TableSize - 3);

	return HashValue + 1;
}

void _Rehash(HashTable** HT) {

	ElementType* OldTable = (*HT)->Table;

	HashTable* NewHT = CreateHashTable((*HT)->TableSize * 2);

	printf("\nRehashed. New table size is : %d\n\n", NewHT->TableSize);

	for (int i = 0; i < (*HT)->TableSize; i++) {
		if (OldTable[i].Status == OCCUPIED) _Set(&NewHT, OldTable[i].Key, OldTable[i].Value);
	}

	DestroyHashTable((*HT));

	(*HT) = NewHT;
}
