#include <stdio.h>
#include <stdlib.h>

typedef int KeyType;
typedef int ValueType;

typedef struct Node {
	KeyType Key;
	ValueType Value;
}Node;

typedef struct HashTable {
	int TableSize;
	Node* Table;
}HashTable;

HashTable* CreateHashTable(int TableSize);
void _Set(HashTable* HT, KeyType Key, ValueType Value);
ValueType _Get(HashTable* HT, KeyType Key);
void DestroyHashTable(HashTable* HT);
int _Hash(KeyType Key, int TableSize);

int main(void) {

	HashTable* HT = CreateHashTable(193);

	_Set(HT, 418, 32114);
	_Set(HT, 9, 514);
	_Set(HT, 27, 8917);
	_Set(HT, 1031, 286);

	printf("Key: %d, Value: %d\n", 418, _Get(HT, 418));
	printf("Key: %d, Value: %d\n", 9, _Get(HT, 9));
	printf("Key: %d, Value: %d\n", 27, _Get(HT, 27));
	printf("Key: %d, Value: %d\n", 1031, _Get(HT, 1031));

	DestroyHashTable(HT);

	return 0;
}

HashTable* CreateHashTable(int TableSize) {

	HashTable* HT = (HashTable*)malloc(sizeof(HashTable));
	HT->Table = (Node*)malloc(sizeof(Node) * TableSize);
	HT->TableSize = TableSize;

	return HT;
}

void _Set(HashTable* HT, KeyType Key, ValueType Value) {

	int Address = _Hash(Key, HT->TableSize);

	HT->Table[Address].Key = Key;
	HT->Table[Address].Value = Value;
}

ValueType _Get(HashTable* HT, KeyType Key) {

	int Address = _Hash(Key, HT->TableSize);

	return HT->Table [Address].Value;
}

void DestroyHashTable(HashTable* HT) {

	free(HT->Table);
	free(HT);
}

int _Hash(KeyType Key, int TableSize) {
	return Key % TableSize;
}
