#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
	int data;
}Node;

typedef struct CircularQueue {
	int capacity;
	int front;
	int rear;

	Node* Nodes;
}CircularQueue;

void Create_Queue(CircularQueue** Queue, int Capacity) {
	(*Queue) = (CircularQueue*)malloc(sizeof(CircularQueue));
	(*Queue)->Nodes = (Node*)malloc(sizeof(Node) * (Capacity + 1));

	(*Queue)->capacity = Capacity;
	(*Queue)->front = 0;
	(*Queue)->rear = 0;
}

void Destroy_Queue(CircularQueue* Queue) {

	free(Queue->Nodes);
	free(Queue);
}

void Enqueue(CircularQueue* Queue, int Data) {
	int position = 0;

	if (Queue->rear == Queue->capacity) {
		position = Queue->rear;
		Queue->rear = 0;
	}
	else position = Queue->rear++;

	Queue->Nodes[position].data = Data;
}

int Dequeue(CircularQueue* Queue) {
	int position = Queue->front;

	if (Queue->front == Queue->capacity) Queue->front = 0;
	else Queue->front++;

	return Queue->Nodes[position].data;
}

int Get_Size(CircularQueue* Queue) {

	if (Queue->front <= Queue->rear) return Queue->rear - Queue->front;
	else return Queue->rear + (Queue->capacity - Queue->front) + 1;
}

int Is_Empty(CircularQueue* Queue) {
	return (Queue->front == Queue->rear);
}

int Is_Full(CircularQueue* Queue) {

	if (Queue->front < Queue->rear) return (Queue->rear - Queue->front) == Queue->capacity;
	else return (Queue->rear + 1) == Queue->front;
}

int main(void) {

	CircularQueue* Queue;

	Create_Queue(&Queue, 10);
	Enqueue(Queue, 1);
	Enqueue(Queue, 2);
	Enqueue(Queue, 3);
	Enqueue(Queue, 4);

	for (int i = 0; i < 3; i++) {
		printf("Dequeue: %d, ", Dequeue(Queue));
		printf("Front:%d, Rear:%d\n", Queue->front, Queue->rear);
	}

	int i = 100;

	while (Is_Full(Queue) == 0) {
		Enqueue(Queue, i++);
	}

	printf("Capacity: %d, Size: %d\n\n", Queue->capacity, Get_Size(Queue));

	while (Is_Empty(Queue) == 0) {
		printf("Dequeue: %d, ", Dequeue(Queue));
		printf("Front:%d, Rear:%d\n", Queue->front, Queue->rear);
	}

	Destroy_Queue(Queue);

	return 0;
}
