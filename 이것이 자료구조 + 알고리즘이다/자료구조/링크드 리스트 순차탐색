#include <stdio.h>
#include <stdlib.h>

typedef struct tagNode {
	int data;
	struct tagNode* NextNode;
}Node;

Node* SLL_CreateNode(int Newdata) {
	Node* NewNode = (Node*)malloc(sizeof(Node));

	NewNode->data = Newdata;
	NewNode->NextNode = NULL;

	return NewNode;
}

void SLL_DestroyNode(Node* Node) {
	free(Node);
}

void SLL_AppendNode(Node** Head, Node* NewNode) {
	if ((*Head) == NULL) {
		*Head = NewNode;
	}
	else {
		Node* Tail = (*Head);
		while (Tail->NextNode != NULL) {
			Tail = Tail->NextNode;
		}

		Tail->NextNode = NewNode;
	}
}

void SLL_RemoveNode(Node** Head, Node* Remove) {
	if (*Head == Remove) {
		*Head = Remove->NextNode;
	}
	else {
		Node* Current = *Head;
		while (Current != NULL && Current->NextNode != Remove) {
			Current = Current->NextNode;
		}

		if (Current != NULL) Current->NextNode = Remove->NextNode;
	}
}

Node* SLL_GetNodeAt(Node* Head, int Location) {

	Node* Current = Head;

	while (Current != NULL && Location > 0) {
		Current = Current->NextNode;
		Location--;
	}

	return Current;
}

int SLL_GetNodeCount(Node* Head) {
	int Count = 0;
	Node* Current = Head;

	while (Current != NULL) {
		Current = Current->NextNode;
		Count++;
	}

	return Count;
}

Node* SLL_SequentialSearch(Node* Head, int Target, int* index) {

	Node* Current = Head;
	Node* Match = NULL;
	int i = 1;

	while (Current != NULL) {
		if (Current->data == Target) {
			Match = Current;
			break;
		}
		else {
			Current = Current->NextNode;
			*index = i++;
		}
	}

	return Match;
}

int main(void) {

	int Count = 0, find = 0;
	Node* List = NULL;
	Node* Current = NULL;
	Node* NewNode = NULL;
	Node* Target = NULL;

	for (int i = 0; i < 5; i++) {
		NewNode = SLL_CreateNode(i);
		SLL_AppendNode(&List, NewNode);
	}

	Count = SLL_GetNodeCount(List);

	while (1) {

		int index = 0;

		printf("찾고 싶은 숫자 입력(종료하고 싶으면 -1 입력): ");
		scanf_s("%d", &find);

		if (find == (-1)) break;

		Target = SLL_SequentialSearch(List, find, &index);

		if (Target == NULL) printf("%d(은)는 없습니다.\n", find);
		else printf("%d는 %d번째에 있습니다.\n", find, index);
	
	}

	printf("\nDestroying List...\n");

	for (int i = 0; i < Count; i++) {
		Current = SLL_GetNodeAt(List, 0);

		if (Current != NULL) {
			SLL_RemoveNode(&List, Current);
			SLL_DestroyNode(Current);
		}
	}

	return 0;
}
