#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct HeapNode {
	int Data;
}HeapNode;

typedef struct Heap {
	HeapNode* Nodes;
	int Capacity;
	int UsedSize;
}Heap;

Heap* Heap_Create(int IntitialSize);
void Heap_Destroy(Heap* H);
void Heap_Insert(Heap* H, int NewData);
void Heap_SwapNodes(Heap* H, int Index1, int Index2);
void Heap_DeleteMin(Heap* H, HeapNode* Root);
int Heap_GetParent(int Index);
int Heap_GetLeftChild(int Index);
void Heap_PrintNodes(Heap* H);

int main(void) {

	Heap* H = Heap_Create(3);
	HeapNode MinNode;

	Heap_Insert(H, 12);
	Heap_Insert(H, 87);
	Heap_Insert(H, 111);
	Heap_Insert(H, 34);
	Heap_Insert(H, 16);
	Heap_Insert(H, 75);
	Heap_PrintNodes(H);

	Heap_DeleteMin(H, &MinNode);
	Heap_PrintNodes(H);

	Heap_DeleteMin(H, &MinNode);
	Heap_PrintNodes(H);

	Heap_DeleteMin(H, &MinNode);
	Heap_PrintNodes(H);

	Heap_DeleteMin(H, &MinNode);
	Heap_PrintNodes(H);

	Heap_DeleteMin(H, &MinNode);
	Heap_PrintNodes(H);

	Heap_DeleteMin(H, &MinNode);
	Heap_PrintNodes(H);

	return 0;
}

Heap* Heap_Create(int IntitialSize) {

	Heap* NewHeap = (Heap*)malloc(sizeof(Heap));
	NewHeap->Capacity = IntitialSize;
	NewHeap->UsedSize = 0;
	NewHeap->Nodes = (HeapNode*)malloc(sizeof(HeapNode) * NewHeap->Capacity);

	printf("size : %d\n", sizeof(HeapNode));

	return NewHeap;
}

void Heap_Destroy(Heap* H) {
	free(H->Nodes);
	free(H);
}

void Heap_Insert(Heap* H, int NewData) {

	int CurrentPosition = H->UsedSize;
	int ParentPosition = Heap_GetParent(CurrentPosition);

	if (H->UsedSize == H->Capacity) {
		H->Capacity *= 2;
		H->Nodes = (HeapNode*)realloc(H->Nodes, sizeof(HeapNode) * H->Capacity);
	}

	H->Nodes[CurrentPosition].Data = NewData;

	while (CurrentPosition > 0 && H->Nodes[CurrentPosition].Data < H->Nodes[ParentPosition].Data) {
		Heap_SwapNodes(H, CurrentPosition, ParentPosition);

		CurrentPosition = ParentPosition,
			ParentPosition = Heap_GetParent(CurrentPosition);
	}

	H->UsedSize++;
}

void Heap_SwapNodes(Heap* H, int Index1, int Index2) {

	int CopySize = sizeof(HeapNode);
	HeapNode* Temp = (HeapNode*)malloc(CopySize);

	memcpy(Temp, &H->Nodes[Index1], CopySize);
	memcpy(&H->Nodes[Index1], &H->Nodes[Index2], CopySize);
	memcpy(&H->Nodes[Index2], Temp, CopySize);

	free(Temp);
}

void Heap_DeleteMin(Heap* H, HeapNode* Root) {

	int ParentPosition = 0, LeftPosition = 0, RightPosition = 0;

	memcpy(Root, &H->Nodes[0], sizeof(HeapNode));
	memset(&H->Nodes[0], 0, sizeof(HeapNode));

	H->UsedSize--;
	Heap_SwapNodes(H, 0, H->UsedSize);

	LeftPosition = Heap_GetLeftChild(0);
	RightPosition = LeftPosition + 1;

	while (1) {
		int SelectedChild = 0;

		if (LeftPosition >= H->UsedSize) break;

		if (RightPosition >= H->UsedSize) SelectedChild = LeftPosition;
		else {
			if (H->Nodes[LeftPosition].Data > H->Nodes[RightPosition].Data) SelectedChild = RightPosition;
			else SelectedChild = LeftPosition;
		}

		if (H->Nodes[SelectedChild].Data < H->Nodes[ParentPosition].Data) {
			Heap_SwapNodes(H, ParentPosition, SelectedChild);
			ParentPosition = SelectedChild;
		}
		else break;

		LeftPosition = Heap_GetLeftChild(ParentPosition);
		RightPosition = LeftPosition + 1;

		if (H->UsedSize < (H->Capacity / 2)) {
			H->Capacity /= 2;
			H->Nodes = (HeapNode*)realloc(H->Nodes, sizeof(HeapNode) * H->Capacity);
		}
	}
}

int Heap_GetParent(int Index) {
	return (int)((Index - 1) / 2);
}

int Heap_GetLeftChild(int Index) {
	return (2 * Index) + 1;
}

void Heap_PrintNodes(Heap* H) {

	for (int i = 0; i < H->UsedSize; i++) {
		printf("%d ", H->Nodes[i].Data);
	}
	printf("\n");
}
