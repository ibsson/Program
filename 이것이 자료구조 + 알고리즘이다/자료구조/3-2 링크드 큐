#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Node {
	char* Data;
	struct Node* NextNode;
}Node;

typedef struct LinkedQueue {
	Node* Front;
	Node* Rear;
	int Count;
}LinkedQueue;

void CreateQueue(LinkedQueue** Queue);
void DestroyQueue(LinkedQueue* Queue);

Node* CreateNode(const char* NewData);
void DestroyNode(Node* _Node);

void Enqueue(LinkedQueue* Queue, Node* NewNode);
Node* Dequeue(LinkedQueue* Queue);

int IsEmpty(LinkedQueue* Queue);

int main(void) {

	Node* Popped;
	LinkedQueue* Queue;

	CreateQueue(&Queue);

	Enqueue(Queue, CreateNode("abc"));
	Enqueue(Queue, CreateNode("def"));
	Enqueue(Queue, CreateNode("efg"));
	Enqueue(Queue, CreateNode("hij"));

	printf("Queue Size : %d\n", Queue->Count);

	while (IsEmpty(Queue) == 0) {
		Popped = Dequeue(Queue);

		printf("Dequeue: %s \n", Popped->Data);

		DestroyNode(Popped);
	}

	DestroyQueue(Queue);

	return 0;
}

void CreateQueue(LinkedQueue** Queue) {

	(*Queue) = (LinkedQueue*)malloc(sizeof(LinkedQueue));
	(*Queue)->Front = NULL;
	(*Queue)->Rear = NULL;
	(*Queue)->Count = 0;
}

void DestroyQueue(LinkedQueue* Queue) {

	while (!IsEmpty(Queue)) {
		Node* Popped = Dequeue(Queue);
		DestroyNode(Popped);
	}

	free(Queue);
}

Node* CreateNode(const char* NewData) {

	Node* NewNode = (Node*)malloc(sizeof(Node));
	NewNode->Data = (char*)malloc(strlen(NewData) + 1);

	strcpy_s(NewNode->Data, strlen(NewData) + 1, NewData);

	NewNode->NextNode = NULL;

	return NewNode;
}

void DestroyNode(Node* _Node) {
	free(_Node->Data);
	free(_Node);
}

void Enqueue(LinkedQueue* Queue, Node* NewNode) {

	if (Queue->Front == NULL) {
		Queue->Front = NewNode;
		Queue->Rear = NewNode;
		Queue->Count++;
	}
	else {
		Queue->Rear->NextNode = NewNode;
		Queue->Rear = NewNode;
		Queue->Count++;
	}
}

Node* Dequeue(LinkedQueue* Queue) {

	Node* Front = Queue->Front;

	if (Queue->Front->NextNode == NULL) {
		Queue->Front = NULL;
		Queue->Rear = NULL;
	}
	else {
		Queue->Front = Queue->Front->NextNode;
	}

	Queue->Count--;

	return Front;
}

int IsEmpty(LinkedQueue* Queue) {
	return (Queue->Front == NULL);
}
