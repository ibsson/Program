#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_WEIGHT 36267;

enum VisitMode { Visited, NotVisited };

typedef int VElementType;

typedef struct Vertex {
	VElementType Data;
	int Visited;
	int Index;

	struct Vertex* Next;
	struct Edge* AdjacencyList;
}Vertex;

typedef struct Edge {
	int Weight;
	struct Edge* Next;
	Vertex* From;
	Vertex* Target;
}Edge;

typedef struct Graph {
	Vertex* Vertices;
	int VertexCount;
}Graph;

typedef struct PQNode {
	int Priority;
	void* Data;
}PQNode;

typedef struct PriorityQueue {
	PQNode* Nodes;
	int Capacity;
	int UsedSize;
}PriorityQueue;

typedef struct DisjointSet {
	struct DisjointSet* Parent;
	void* data;
}DisjointSet;

Graph* Create_Graph();
void Destroy_Graph(Graph* G);
Vertex* Create_Vertex(VElementType Data);
void Destroy_Vertex(Vertex* V);
Edge* Create_Edge(Vertex* From, Vertex* Target, int Weight);
void DestroyEdge(Edge* E);
void Add_Vertex(Graph* G, Vertex* V);
void Add_Edge(Vertex* V, Edge* E);
void Print_Graph(Graph* G);

PriorityQueue* PQ_Create(int IntitialSize);
void PQ_Destroy(PriorityQueue* PQ);
void PQ_Enqueue(PriorityQueue* PQ, PQNode NewNode);
void PQ_SwapNodes(PriorityQueue* PQ, int Index1, int Index2);
void PQ_Dequeue(PriorityQueue* PQ, PQNode* Root);
int PQ_GetParent(int Index);
int PQ_GetLeftChild(int Index);
int PQ_IsEmpty(PriorityQueue* PQ);
void PrintNodes(PQNode* Node);

DisjointSet* DS_FindSet(DisjointSet* Set);
void DS_UnionSet(DisjointSet* Set1, DisjointSet* Set2);
DisjointSet* DS_MakeSet(void* NewData);
void DS_DestroySet(DisjointSet* Set);

void Prim(Graph* G, Vertex* StartVertex, Graph* MST);
void Kruskal(Graph* G, Graph* MST);


int main(void) {

	Graph* graph = Create_Graph();
	Graph* PrimMST = Create_Graph();
	Graph* KruskalMST = Create_Graph();

	Vertex* V1 = Create_Vertex('A');
	Vertex* V2 = Create_Vertex('B');
	Vertex* V3 = Create_Vertex('C');
	Vertex* V4 = Create_Vertex('D');
	Vertex* V5 = Create_Vertex('E');
	Vertex* V6 = Create_Vertex('F');
	Vertex* V7 = Create_Vertex('G');
	Vertex* V8 = Create_Vertex('H');
	Vertex* V9 = Create_Vertex('I');

	Add_Vertex(graph, V1);
	Add_Vertex(graph, V2);
	Add_Vertex(graph, V3);
	Add_Vertex(graph, V4);
	Add_Vertex(graph, V5);
	Add_Vertex(graph, V6);
	Add_Vertex(graph, V7);
	Add_Vertex(graph, V8);
	Add_Vertex(graph, V9);
	
	Add_Edge(V1, Create_Edge(V1, V2, 35));
	Add_Edge(V1, Create_Edge(V1, V5, 247));

	Add_Edge(V2, Create_Edge(V2, V1, 35));
	Add_Edge(V2, Create_Edge(V2, V3, 126));
	Add_Edge(V2, Create_Edge(V2, V6, 150));

	Add_Edge(V3, Create_Edge(V3, V2, 126));
	Add_Edge(V3, Create_Edge(V3, V4, 117));
	Add_Edge(V3, Create_Edge(V3, V6, 162));
	Add_Edge(V3, Create_Edge(V3, V7, 220));

	Add_Edge(V4, Create_Edge(V4, V3, 117));

	Add_Edge(V5, Create_Edge(V5, V1, 247));
	Add_Edge(V5, Create_Edge(V5, V6, 82));
	Add_Edge(V5, Create_Edge(V5, V8, 98));

	Add_Edge(V6, Create_Edge(V6, V2, 150));
	Add_Edge(V6, Create_Edge(V6, V3, 162));
	Add_Edge(V6, Create_Edge(V6, V5, 82));
	Add_Edge(V6, Create_Edge(V6, V7, 154));
	Add_Edge(V6, Create_Edge(V6, V8, 120));

	Add_Edge(V7, Create_Edge(V7, V3, 220));
	Add_Edge(V7, Create_Edge(V7, V6, 154));
	Add_Edge(V7, Create_Edge(V7, V9, 106));

	Add_Edge(V8, Create_Edge(V8, V5, 98));
	Add_Edge(V8, Create_Edge(V8, V6, 120));

	Add_Edge(V9, Create_Edge(V9, V7, 106));

	printf("Prim's Algorithm\n");
	Prim(graph, V2, PrimMST);
	Print_Graph(PrimMST);

	printf("Kruskal's Algorithm...\n");
	Kruskal(graph, KruskalMST);
	Print_Graph(KruskalMST);

	Destroy_Graph(PrimMST);
	Destroy_Graph(KruskalMST);
	Destroy_Graph(graph);

	return 0;
}

Graph* Create_Graph() {

	Graph* graph = (Graph*)malloc(sizeof(Graph));
	graph->Vertices = NULL;
	graph->VertexCount = 0;

	return graph;
}

void Destroy_Graph(Graph* G) {

	while (G->Vertices != NULL) {
		Vertex* Vertices = G->Vertices->Next;
		Destroy_Vertex(G->Vertices);
		G->Vertices = Vertices;
	}

	free(G);
}

Vertex* Create_Vertex(VElementType Data) {

	Vertex* V = (Vertex*)malloc(sizeof(Vertex));

	V->Data = Data;
	V->Next = NULL;
	V->AdjacencyList = NULL;
	V->Visited = NotVisited;
	V->Index = -1;

	return V;
}

void Destroy_Vertex(Vertex* V) {

	while (V->AdjacencyList != NULL) {
		Edge* Edge = V->AdjacencyList->Next;

		DestroyEdge(V->AdjacencyList);

		V->AdjacencyList = Edge;
	}

	free(V);
}

Edge* Create_Edge(Vertex* From, Vertex* Target, int Weight) {

	Edge* E = (Edge*)malloc(sizeof(Edge));
	E->From = From;
	E->Target = Target;
	E->Next = NULL;
	E->Weight = Weight;

	return E;
}

void DestroyEdge(Edge* E) {
	free(E);
}

void Add_Vertex(Graph* G, Vertex* V) {

	Vertex* VertexList = G->Vertices;

	if (VertexList == NULL) {
		G->Vertices = V;
	}
	else {
		while (VertexList->Next != NULL) {
			VertexList = VertexList->Next;
		}

		VertexList->Next = V;
	}

	V->Index = G->VertexCount++;
}

void Add_Edge(Vertex* V, Edge* E) {

	if (V->AdjacencyList == NULL) V->AdjacencyList = E;
	else {
		Edge* AdjacencyList = V->AdjacencyList;

		while (AdjacencyList->Next != NULL) {
			AdjacencyList = AdjacencyList->Next;
		}

		AdjacencyList->Next = E;
	}
}

void Print_Graph(Graph* G) {

	Vertex* V = NULL;
	Edge* E = NULL;

	V = G->Vertices;

	if (V == NULL) return;

	while (V != NULL) {
		printf("%c : ", V->Data);

		E = V->AdjacencyList;

		if (E == NULL) {
			V = V->Next;
			printf("\n");
			continue;
		}

		while (E != NULL) {
			printf("%c[%d] ", E->Target->Data, E->Weight);
			E = E->Next;
		}

		printf("\n");

		V = V->Next;
	}

	printf("\n");
}


PriorityQueue* PQ_Create(int IntitialSize) {

	PriorityQueue* NewPQ = (PriorityQueue*)malloc(sizeof(PriorityQueue));
	NewPQ->Capacity = IntitialSize;
	NewPQ->UsedSize = 0;
	NewPQ->Nodes = (PQNode*)malloc(sizeof(PQNode) * NewPQ->Capacity);

	return NewPQ;
}

void PQ_Destroy(PriorityQueue* PQ) {
	free(PQ->Nodes);
	free(PQ);
}

void PQ_Enqueue(PriorityQueue* PQ, PQNode NewNode) {

	int CurrentPosition = PQ->UsedSize;
	int ParentPosition = PQ_GetParent(CurrentPosition);

	if (PQ->UsedSize == PQ->Capacity) {
		if (PQ->Capacity == 0) PQ->Capacity = 1;

		PQ->Capacity *= 2;
		PQ->Nodes = (PQNode*)realloc(PQ->Nodes, sizeof(PQNode) * PQ->Capacity);
	}

	PQ->Nodes[CurrentPosition] = NewNode;

	while (CurrentPosition > 0 && PQ->Nodes[CurrentPosition].Priority < PQ->Nodes[ParentPosition].Priority) {
		PQ_SwapNodes(PQ, CurrentPosition, ParentPosition);

		CurrentPosition = ParentPosition;
		ParentPosition = PQ_GetParent(CurrentPosition);
	}

	PQ->UsedSize++;
}

void PQ_SwapNodes(PriorityQueue* PQ, int Index1, int Index2) {

	int CopySize = sizeof(PQNode);
	PQNode* Temp = (PQNode*)malloc(CopySize);

	memcpy(Temp, &PQ->Nodes[Index1], CopySize);
	memcpy(&PQ->Nodes[Index1], &PQ->Nodes[Index2], CopySize);
	memcpy(&PQ->Nodes[Index2], Temp, CopySize);

	free(Temp);
}

void PQ_Dequeue(PriorityQueue* PQ, PQNode* Root) {

	int ParentPosition = 0, LeftPosition = 0, RightPosition = 0;

	memcpy(Root, &PQ->Nodes[0], sizeof(PQNode));
	memset(&PQ->Nodes[0], 0, sizeof(PQNode));

	PQ->UsedSize--;
	PQ_SwapNodes(PQ, 0, PQ->UsedSize);

	LeftPosition = PQ_GetLeftChild(0);
	RightPosition = LeftPosition + 1;

	while (1) {
		int SelectedChild = 0;

		if (LeftPosition >= PQ->UsedSize) break;

		if (RightPosition >= PQ->UsedSize) SelectedChild = LeftPosition;
		else {
			if (PQ->Nodes[LeftPosition].Priority > PQ->Nodes[RightPosition].Priority) SelectedChild = RightPosition;
			else SelectedChild = LeftPosition;
		}

		if (PQ->Nodes[SelectedChild].Priority < PQ->Nodes[ParentPosition].Priority) {
			PQ_SwapNodes(PQ, ParentPosition, SelectedChild);
			ParentPosition = SelectedChild;
		}
		else break;

		LeftPosition = PQ_GetLeftChild(ParentPosition);
		RightPosition = LeftPosition + 1;

		if (PQ->UsedSize < (PQ->Capacity / 2)) {
			PQ->Capacity /= 2;
			PQ->Nodes = (PQNode*)realloc(PQ->Nodes, sizeof(PQNode) * PQ->Capacity);
		}
	}
}

int PQ_GetParent(int Index) {
	return (int)((Index - 1) / 2);
}

int PQ_GetLeftChild(int Index) {
	return (2 * Index) + 1;
}

int PQ_IsEmpty(PriorityQueue* PQ) {
	return (PQ->UsedSize == 0);
}

void PrintNodes(PQNode* Node) {

	printf("작업명 : %s (우선순위:%d)\n", Node->Data, Node->Priority);
}


DisjointSet* DS_FindSet(DisjointSet* Set) {

	while (Set->Parent != NULL) {
		Set = Set->Parent;
	}

	return Set;
}

void DS_UnionSet(DisjointSet* Set1, DisjointSet* Set2) {

	Set2 = DS_FindSet(Set2);
	Set2->Parent = Set1;
}

DisjointSet* DS_MakeSet(void* NewData) {

	DisjointSet* NewNode = (DisjointSet*)malloc(sizeof(DisjointSet));
	NewNode->data = NewData;
	NewNode->Parent = NULL;

	return NewNode;
}

void DS_DestroySet(DisjointSet* Set) {
	free(Set);
}


void Prim(Graph* G, Vertex* StartVertex, Graph* MST) {

	int i = 0;

	PQNode StartNode = { 0, StartVertex };
	PriorityQueue* PQ = PQ_Create(10);

	Vertex* CurrentVertex = NULL;
	Edge* CurrentEdge = NULL;

	int* Weights = (int*)malloc(sizeof(int) * G->VertexCount);
	Vertex** MSTVertices = (Vertex**)malloc(sizeof(Vertex*) * G->VertexCount);
	Vertex** Fringes = (Vertex**)malloc(sizeof(Vertex*) * G->VertexCount);
	Vertex** Precedences = (Vertex**)malloc(sizeof(Vertex*) * G->VertexCount);

	CurrentVertex = G->Vertices;
	while (CurrentVertex != NULL) {
		Vertex* NewVertex = Create_Vertex(CurrentVertex->Data);
		Add_Vertex(MST, NewVertex);

		Fringes[i] = NULL;
		Precedences[i] = NULL;
		MSTVertices[i] = NewVertex;
		Weights[i] = MAX_WEIGHT;
		CurrentVertex = CurrentVertex->Next;
		i++;
	}

	PQ_Enqueue(PQ, StartNode);
	Weights[StartVertex->Index] = 0;

	while (!PQ_IsEmpty(PQ)) {
		PQNode Popped;

		PQ_Dequeue(PQ, &Popped);
		CurrentVertex = (Vertex*)Popped.Data;

		Fringes[CurrentVertex->Index] = CurrentVertex;

		CurrentEdge = CurrentVertex->AdjacencyList;
		while (CurrentEdge != NULL) {
			Vertex* TargetVertex = CurrentEdge->Target;

			if (Fringes[TargetVertex->Index] == NULL && CurrentEdge->Weight < Weights[TargetVertex->Index]) {
				PQNode NewNode = { CurrentEdge->Weight, TargetVertex };
				PQ_Enqueue(PQ, NewNode);

				Precedences[TargetVertex->Index] = CurrentEdge->From;
				Weights[TargetVertex->Index] = CurrentEdge->Weight;
			}

			CurrentEdge = CurrentEdge->Next;
		}
	}

	for (i = 0; i < G->VertexCount; i++) {
		int FromIndex = 0, ToIndex = 0;

		if (Precedences[i] == NULL) continue;

		FromIndex = Precedences[i]->Index;
		ToIndex = i;

		Add_Edge(MSTVertices[FromIndex], Create_Edge(MSTVertices[FromIndex], MSTVertices[ToIndex], Weights[i]));

		Add_Edge(MSTVertices[ToIndex], Create_Edge(MSTVertices[ToIndex], MSTVertices[FromIndex], Weights[i]));
	}

	free(Fringes);
	free(Precedences);
	free(MSTVertices);
	free(Weights);

	PQ_Destroy(PQ);
}

void Kruskal(Graph* G, Graph* MST) {

	int i;
	Vertex* CurrentVertex = NULL;
	Vertex** MSTVertices = (Vertex**)malloc(sizeof(Vertex*) * G->VertexCount);

	DisjointSet** VertexSet = (DisjointSet**)malloc(sizeof(DisjointSet*) * G->VertexCount);

	PriorityQueue* PQ = PQ_Create(10);

	i = 0;
	CurrentVertex = G->Vertices;
	while (CurrentVertex != NULL) {
		Edge* CurrentEdge;

		VertexSet[i] = DS_MakeSet(CurrentVertex);
		MSTVertices[i] = Create_Vertex(CurrentVertex->Data);
		Add_Vertex(MST, MSTVertices[i]);

		CurrentEdge = CurrentVertex->AdjacencyList;
		while (CurrentEdge != NULL) {
			PQNode NewNode = { CurrentEdge->Weight, CurrentEdge };
			PQ_Enqueue(PQ, NewNode);

			CurrentEdge = CurrentEdge->Next;
		}

		CurrentVertex = CurrentVertex->Next;
		i++;
	}

	while (!PQ_IsEmpty(PQ)) {
		Edge* CurrentEdge;
		int FromIndex;
		int ToIndex;
		PQNode Popped;

		PQ_Dequeue(PQ, &Popped);
		CurrentEdge = (Edge*)Popped.Data;

		printf("%c - %c : %d\n", CurrentEdge->From->Data, CurrentEdge->Target->Data, CurrentEdge->Weight);

		FromIndex = CurrentEdge->From->Index;
		ToIndex = CurrentEdge->Target->Index;

		if (DS_FindSet(VertexSet[FromIndex]) != DS_FindSet(VertexSet[ToIndex])) {
			Add_Edge(MSTVertices[FromIndex], Create_Edge(MSTVertices[FromIndex], MSTVertices[ToIndex], CurrentEdge->Weight));

			Add_Edge(MSTVertices[ToIndex], Create_Edge(MSTVertices[ToIndex], MSTVertices[FromIndex], CurrentEdge->Weight));

			DS_UnionSet(VertexSet[FromIndex], VertexSet[ToIndex]);
		}
	}

	for (i = 0; i < G->VertexCount; i++) {
		DS_DestroySet(VertexSet[i]);
	}

	free(VertexSet);
	free(MSTVertices);
}
