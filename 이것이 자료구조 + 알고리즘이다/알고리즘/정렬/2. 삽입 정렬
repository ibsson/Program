/*
성능은 버블 정렬과 비슷하게 n(n-1)/2 이다. 하지만 이미 정렬이 되어 있다면 버블 정렬과 다르게 비교를 거치지 않기에 삽입 정렬이 조금 더 나은 성능을 가진다. 
크기가 작은 자료구조 정렬을 할때는 삽입 정렬을 권장.
*/

#include <stdio.h>
#include <string.h>

void InsertionSort(int data[], int len) {

	int value = 0;

	for (int i = 1; i < len; i++) {
		if (data[i - 1] <= data[i]) continue;

		value = data[i];

		for (int j = 0; j < i; j++) {
			if (data[j] > value) {
				memmove(&data[j + 1], &data[j], sizeof(data[0]) * (i - j)); //메모리의 내용을 이동시키는 함수. 배열처럼 연속된 데이터를 단번에 이동시킬때 유용
				data[j] = value;                                            //ㄴ 1.원본 데이터가 옮겨갈 메모리의 주소, 2.원본 데이터 주소, 3.이동시킬 바이트 양
				break;
			}
		}
	}
}

int main(void) {

	int data[] = { 6, 4, 2, 3, 1, 5 };
	int len = sizeof(data) / sizeof(data[0]);

	InsertionSort(data, len);

	for (int i = 0; i < len; i++) {
		printf("%d ", data[i]);
	}

	printf("\n");

	return 0;
}
