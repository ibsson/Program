//오름차순

#include <stdio.h>
#include <stdlib.h>

int Compare(const void* _elem1, const void* _elem2) {
	
	int* elem1 = (int*)_elem1;
	int* elem2 = (int*)_elem2;

	if (*elem1 > *elem2) return 1; //return 값이 양수면 두 수를 바꾸고 음수면 안바꾼다.
	else if (*elem1 < *elem2) return -1;
	else return 0;
}

int main(void) {

	int data[] = { 6, 4, 2, 3, 1, 5 };
	int len = sizeof(data) / sizeof(data[0]);

	qsort(data, len, sizeof(int), Compare);

	for (int i = 0; i < len; i++) {
		printf("%d ", data[i]);
	}

	printf("\n");

	return 0;
}

/*
문자열을 정렬하고 싶을때는 비교함수를
int compare(const book* a, const book* b) {
	return strcmp(a->word, b->word);
}
로 만들면 된다. (여기서 book은 구조체이다, 그냥 자료형(char등)으로 해도 된다)
strcmp는 문자열이 같으면 0, 다르면 1 or -1을 반환한다. 1은 앞 문자열의 첫글자가 뒤 문자열의 첫글자의 아스키 코드보다 클때
-1은 앞 문자열의 첫글자가 뒤 문자열의 첫글자의 아스키 코드보다 작을때 반환한다.
*/


//내림차순

#include <stdio.h>
#include <stdlib.h>

int Compare(const void* _elem1, const void* _elem2) {
	
	int* elem1 = (int*)_elem1;
	int* elem2 = (int*)_elem2;

	if (*elem1 < *elem2) return 1;
	else if (*elem1 > *elem2) return -1;
	else return 0;
}

int main(void) {

	int data[] = { 6, 4, 2, 3, 1, 5 };
	int len = sizeof(data) / sizeof(data[0]);

	qsort(data, len, sizeof(int), Compare);

	for (int i = 0; i < len; i++) {
		printf("%d ", data[i]);
	}

	printf("\n");

	return 0;
}
