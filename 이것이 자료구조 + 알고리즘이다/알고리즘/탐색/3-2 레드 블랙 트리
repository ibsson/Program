#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef enum { RED, BLACK } ColorType;

typedef struct Node {
	struct Node* Parent;
	struct Node* Left;
	struct Node* Right;

	ColorType Color;;

	int Data;
}Node;

Node* Nil;

void DestroyTree(Node* Tree);

Node* CreateNode(int NewData);
void DestroyNode(Node* Node);

Node* SearchNode(Node* Tree, int Target);
Node* SearchMinNode(Node* Tree);
void InsertNode(Node** Tree, Node* NewNode);
void InsertNodeHelper(Node** Tree, Node* NewNode);
Node* RemoveNode(Node** Root, int Target);
void RebuildAfterInsert(Node** Tree, Node* NewNode);
void RebuildAfterRemove(Node** Root, Node* X);

void PrintTree(Node* Node, int Depth, int BlackCount);
void RotateLeft(Node** Root, Node* Parent);
void RotateRight(Node** Root, Node* Parent);

int main(void) {

	Node* Tree = NULL;
	Node* Node = NULL;

	Nil = CreateNode(0);
	Nil->Color = BLACK;
	
	while (1) {
		int cmd = 0, param = 0;
		char buffer[10];

		printf("Enter command number :\n");
		printf("(1) Create a node, (2) Remove a node, (3) Search a Node\n");
		printf("(4) Display Tree, (5) quit\n");
		printf("command number:");

		fgets(buffer, sizeof(buffer) - 1, stdin);
		sscanf_s(buffer, "%d", &cmd);

		if (cmd < 1 || cmd > 5) {
			printf("Invalid command number.\n");
			continue;
		}
		else if (cmd == 4) {
			PrintTree(Tree, 0, 0);
			printf("\n");
			continue;
		}
		else if (cmd == 5) break;

		printf("Enter parameter (1~200) :\n");

		fgets(buffer, sizeof(buffer) - 1, stdin);
		sscanf_s(buffer, "%d", &param);

		if (param < 1 || param > 200) {
			printf("Invalid parameter.%d\n", param);
			continue;
		}

		switch (cmd) {
		case 1:
			InsertNode(&Tree, CreateNode(param));
			break;
		case2:
			Node = RemoveNode(&Tree, param);

			if (Node == NULL) printf("Not found node to delete:%d\n", param);
			else DestroyNode(Node);

			break;
		case 3:
			Node = SearchNode(Tree, param);

			if (Node == NULL) printf("Not found node:%d\n", param);
			else printf("Fount Node: %d(Colors:%s)\n", Node->Data, (Node->Color == RED) ? "RED" : "BLACK");

			break;
		}

		printf("\n");
	}

	DestroyTree(Tree);

	return 0;
}

Node* CreateNode(int NewData) {

	Node* NewNode = (Node*)malloc(sizeof(Node));
	NewNode->Parent = NULL;
	NewNode->Left = NULL;
	NewNode->Right;
	NewNode->Data = NewData;
	NewNode->Color = BLACK;

	return NewNode;
}

void DestroyNode(Node* Node) {
	free(Node);
}

void DestroyTree(Node* Tree) {

	if (Tree->Right != Nil) DestroyTree(Tree->Right);

	if (Tree->Left != Nil) DestroyTree(Tree->Left);

	Tree->Left = Nil;
	Tree->Right = Nil;

	DestroyNode(Tree);
}

Node* SearchNode(Node* Tree, int Target) {

	if (Tree == Nil) return NULL;

	if (Tree->Data > Target) return SearchNode(Tree->Left, Target);
	else if (Tree->Data < Target) return SearchNode(Tree->Right, Target);
	else return Tree;
}

Node* SearchMinNode(Node* Tree) {

	if (Tree == Nil) return Nil;

	if (Tree->Left == Nil) return Tree;
	else return SearchMinNode(Tree->Left);
}

void InsertNode(Node** Tree, Node* NewNode) {

	InsertNodeHelper(Tree, NewNode);

	NewNode->Color = RED;
	NewNode->Left = Nil;
	NewNode->Right = Nil;

	RebuildAfterInsert(Tree, NewNode);
}

void InsertNodeHelper(Node** Tree, Node* NewNode) {

	if ((*Tree) == NULL) (*Tree) = NewNode;

	if ((*Tree)->Data < NewNode->Data) {
		if ((*Tree)->Right == Nil) {
			(*Tree)->Right = NewNode;
			NewNode->Parent = (*Tree);
		}
		else InsertNodeHelper(&(*Tree)->Right, NewNode);
	}
	else if ((*Tree)->Data > NewNode->Data) {
		if ((*Tree)->Left == Nil) {
			(*Tree)->Left = NewNode;
			NewNode->Parent = (*Tree);
		}
		else InsertNodeHelper(&(*Tree)->Left, NewNode);
	}
}

void RotateRight(Node** Root, Node* Parent) {

	Node* LeftChild = Parent->Left;

	Parent->Left = LeftChild->Right;

	if (LeftChild->Right != Nil) LeftChild->Right->Parent = Parent;

	LeftChild->Parent = Parent->Parent;

	if (Parent->Parent == NULL) (*Root) = LeftChild;
	else {
		if (Parent == Parent->Parent->Left) Parent->Parent->Left = LeftChild;
		else Parent->Parent->Right = LeftChild;
	}

	LeftChild->Right = Parent;
	Parent->Parent = LeftChild;
}

void RotateLeft(Node** Root, Node* Parent) {
	Node* RightChild = Parent->Right;

	Parent->Right = RightChild->Left;

	if (RightChild->Left != Nil) RightChild->Left->Parent = Parent;

	RightChild->Parent = Parent->Parent;

	if (Parent->Parent == NULL) (*Root) = RightChild;
	else {
		if (Parent == Parent->Parent->Left) Parent->Parent->Left = RightChild;
		else Parent->Parent->Right = RightChild;
	}

	RightChild->Left = Parent;
	Parent->Parent = RightChild;
}

void RebuildAfterInsert(Node** Root, Node* X) {

	while (X != (*Root) && X->Parent->Color == RED) {
		if (X->Parent == X->Parent->Parent->Left) {
			Node* Uncle = X->Parent->Parent->Right;
			if (Uncle->Color == RED) {
				X->Parent->Color = BLACK;
				Uncle->Color = BLACK;
				X->Parent->Parent->Color = RED;

				X = X->Parent->Parent;
			}
			else {
				if (X == X->Parent->Right) {
					X = X->Parent;
					RotateLeft(Root, X);
				}

				X->Parent->Color = BLACK;
				X->Parent->Parent->Color = RED;

				RotateRight(Root, X->Parent->Parent);
			}
		}
		else {
			Node* Uncle = X->Parent->Parent->Left;
			if (Uncle->Color == RED) {
				X->Parent->Color = BLACK;
				Uncle->Color = BLACK;
				X->Parent->Parent->Color = RED;

				X = X->Parent->Parent;
			}
			else {
				if (X == X->Parent->Left) {
					X = X->Parent;
					RotateRight(Root, X);
				}

				X->Parent->Color = BLACK;
				X->Parent->Parent->Color = RED;
				RotateLeft(Root, X->Parent->Parent);
			}
		}
	}

	(*Root)->Color = BLACK;
}

Node* RemoveNode(Node** Root, int data) {

	Node* Removed = NULL;
	Node* Successor = NULL;
	Node* Target = SearchNode((*Root), data);

	if (Target == NULL) return NULL;

	if (Target->Left == Nil || Target->Right == Nil) Removed = Target;
	else {
		Removed = SearchMinNode(Target->Right);
		Target->Data = Removed->Data;
	}

	if (Removed->Left != Nil) Successor = Removed->Left;
	else Successor = Removed->Right;

	Successor->Parent = Removed->Parent;

	if (Removed->Parent == NULL) (*Root) = Successor;
	else {
		if (Removed == Removed->Parent->Left) Removed->Parent->Left = Successor;
		else Removed->Parent->Right = Successor;
	}

	if (Removed->Color == BLACK) RebuildAfterRemove(Root, Successor);

	return Removed;
}

void RebuildAfterRemove(Node** Root, Node* Successor) {

	Node* Sibling = NULL;

	while (Successor->Parent != NULL && Successor->Color == BLACK) {
		if (Successor == Successor->Parent->Left) {
			Sibling = Successor->Parent->Right;

			if (Sibling->Color == RED) {
				Sibling->Color = BLACK;
				Successor->Parent->Color = RED;
				RotateLeft(Root, Successor->Parent);
			}
			else {
				if (Sibling->Left->Color == BLACK && Sibling->Right->Color == BLACK) {
					Sibling->Color = RED;
					Successor = Successor->Parent;
				}
				else {
					if (Sibling->Left->Color == RED) {
						Sibling->Left->Color = BLACK;
						Sibling->Color = RED;

						RotateRight(Root, Sibling);
						Sibling = Successor->Parent->Right;
					}

					Sibling->Color = Successor->Parent->Color;
					Successor->Parent->Color = BLACK;
					Sibling->Right->Color = BLACK;
					RotateLeft(Root, Successor->Parent);
					Successor = (*Root);
				}
			}
		}
		else {
			Sibling = Successor->Parent->Left;

			if (Sibling->Color == RED) {
				Sibling->Color = BLACK;
				Successor->Parent->Color = RED;
				RotateRight(Root, Successor->Parent);
			}
			else {
				if (Sibling->Right->Color == BLACK && Sibling->Left->Color == BLACK) {
					Sibling->Color = RED;
					Successor = Successor->Parent;
				}
				else {
					if (Sibling->Right->Color == RED) {
						Sibling->Right->Color = BLACK;
						Sibling->Color = RED;

						RotateLeft(Root, Sibling);
						Sibling = Successor->Parent->Left;
					}

					Sibling->Color = Successor->Parent->Color;
					Successor->Parent->Color = BLACK;
					Sibling->Left->Color = BLACK;
					RotateRight(Root, Successor->Parent);
					Successor = (*Root);
				}
			}
		}
	}

	Successor->Color = BLACK;
}

void PrintTree(Node* Node, int Depth, int BlackCount) {

	char c = 'X';
	int v = -1;
	char cnt[100];

	if (Node == NULL || Node == Nil) return;

	if (Node->Color == BLACK) BlackCount++;

	if (Node->Parent != NULL) {
		v = Node->Parent->Data;

		if (Node->Parent->Left == Node) c = 'L';
		else c = 'R';
	}

	if (Node->Left == Nil && Node->Right == Nil) sprintf_s(cnt, "------- %d", BlackCount);
	else strncpy_s(cnt, "", sizeof(cnt));

	for (int i = 0; i < Depth; i++) {
		printf("  ");
	}

	printf("%d %s [%c, %d] %s\n", Node->Data, (Node->Color == RED) ? "RED" : "BLACK", c, v, cnt);

	PrintTree(Node->Left, (Depth + 1), BlackCount);
	PrintTree(Node->Right, (Depth + 1), BlackCount);
}
