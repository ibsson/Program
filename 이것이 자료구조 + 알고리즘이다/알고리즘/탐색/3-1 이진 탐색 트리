#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
	struct Node* Left;
	struct Node* Right;
	int Data;
}Node;

Node* CreateNode(int NewData) {

	Node* NewNode = (Node*)malloc(sizeof(Node));
	NewNode->Left = NULL;
	NewNode->Right = NULL;
	NewNode->Data = NewData;

	return NewNode;
}

void DestroyNode(Node* Node) {
	free(Node);
}

void DestroyTree(Node* Tree) {

	if (Tree->Right != NULL) DestroyTree(Tree->Right);

	if (Tree->Left != NULL) DestroyTree(Tree->Left);

	Tree->Left = NULL;
	Tree->Right = NULL;

	DestroyNode(Tree);
}

Node* SearchNode(Node* Tree, int Target) {
	
	if (Tree == NULL) return NULL;

	if (Tree->Data == Target) return Tree;
	else if (Tree->Data > Target) return SearchNode(Tree->Left, Target);
	else return SearchNode(Tree->Right, Target);
}

Node* SearchMinNode(Node* Tree) {
	if (Tree == NULL) return NULL;
	
	if (Tree->Left == NULL) return Tree;
	else return SearchMinNode(Tree->Left);
}

void InsertNode(Node* Tree, Node* Child) {

	if (Tree->Data < Child->Data) {
		if (Tree->Right == NULL) Tree->Right = Child;
		else InsertNode(Tree->Right, Child);
	}
	else if (Tree->Data > Child->Data) {
		if(Tree->Left == NULL) Tree->Left = Child;
		else InsertNode(Tree->Left, Child);
		}
}

Node* RemoveNode(Node* Tree, Node* Parent, int Target) {
	
	Node* Removed = NULL;

	if (Tree == NULL) return NULL;

	if (Tree->Data > Target) Removed = RemoveNode(Tree->Left, Tree, Target);
	else if (Tree->Data < Target) Removed = RemoveNode(Tree->Right, Tree, Target);
	else {
		Removed = Tree;

		if (Tree->Left == NULL && Tree->Right == NULL) {
			if (Parent->Left == Tree) Parent->Left = NULL;
			else Parent->Right = NULL;
		}
		else {
			if (Tree->Left != NULL && Tree->Right != NULL) {
				Node* MinNode = SearchMinNode(Tree->Right);
				MinNode = RemoveNode(Tree, NULL, MinNode->Data);
				Tree->Data = MinNode->Data;
			}
			else {
				Node* Tmp = NULL;
				if (Tree->Left != NULL) Tmp = Tree->Left;
				else Tmp = Tree->Right;

				if (Parent->Left == Tree) Parent->Left = Tmp;
				else Parent->Right = Tmp;
			}
		}
	}

	return Removed;
}

void InorderPrintTree(Node* Node) {
	
	if (Node == NULL) return;

	InorderPrintTree(Node->Left);

	printf("%d ", Node->Data);

	InorderPrintTree(Node->Right);
}

void PrintSearchResult(int SearchTarget, Node* Result) {
	
	if (Result != NULL) printf("Found : %d \n", Result->Data);
	else printf("Node Fount : %d\n", SearchTarget);
}

int main(void) {

	Node* Tree = CreateNode(123);
	Node* Node = NULL;

	InsertNode(Tree, CreateNode(22));
	InsertNode(Tree, CreateNode(9918));
	InsertNode(Tree, CreateNode(424));
	InsertNode(Tree, CreateNode(17));
	InsertNode(Tree, CreateNode(3));

	InsertNode(Tree, CreateNode(98));
	InsertNode(Tree, CreateNode(34));

	InsertNode(Tree, CreateNode(760));
	InsertNode(Tree, CreateNode(317));
	InsertNode(Tree, CreateNode(1));

	int SearchTarget = 17;
	Node = SearchNode(Tree, SearchTarget);
	PrintSearchResult(SearchTarget, Node);

	SearchTarget = 117;
	Node = SearchNode(Tree, SearchTarget);
	PrintSearchResult(SearchTarget, Node);

	InorderPrintTree(Tree);
	printf("\n");

	printf("Removing 98...\n");

	Node = RemoveNode(Tree, NULL, 98);
	DestroyNode(Node);

	InorderPrintTree(Tree);
	printf("\n");

	printf("Inserting 111...\n");

	InsertNode(Tree, CreateNode(111));
	InorderPrintTree(Tree);
	printf("\n");

	DestroyTree(Tree);

	return 0;
}
