#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef struct tagNode {
	char* data;
	struct tagNode* NextNode;
}Node;

typedef struct tagLinkedListStack {
	Node* List;
	Node* Top;
}LinkedListStack;

void LLS_CreateStack(LinkedListStack** Stack);
void LLS_DestroyStack(LinkedListStack* Stack);

Node* LLS_CreateNode(char* data);
void LLS_DestroyNode(Node* _Node);

void LLS_Push(LinkedListStack* Stack, Node* NewNode);
Node* LLS_Pop(LinkedListStack* Stack);

Node* LLS_Top(LinkedListStack* Stack);
int LLS_GetSize(LinkedListStack* Stack);
int LLS_IsEmpty(LinkedListStack* Stack);

void LLS_CreateStack(LinkedListStack** Stack) {
	(*Stack) = (LinkedListStack*)malloc(sizeof(LinkedListStack));
	(*Stack)->List = NULL;
	(*Stack)->Top = NULL;
}

void LLS_DestroyStack(LinkedListStack* Stack) {
	while (!LLS_IsEmpty(Stack)) {
		Node* Popped = LLS_Pop(Stack);
		LLS_DestroyNode(Popped);
	}

	free(Stack);
}

Node* LLS_CreateNode(char* Newdata) {

	Node* NewNode = (Node*)malloc(sizeof(Node));
	NewNode->data = (char*)malloc(strlen(Newdata) + 1);

	strcpy(NewNode->data, Newdata);

	NewNode->NextNode = NULL;

	return NewNode;
}

void LLS_DestroyNode(Node* _Node) {
	free(_Node->data);
	free(_Node);
}

void LLS_Push(LinkedListStack* Stack, Node* NewNode) {

	if (Stack->List == NULL) Stack->List = NewNode;
	else Stack->Top->NextNode = NewNode;

	Stack->Top = NewNode;
}

Node* LLS_Pop(LinkedListStack* Stack) {

	Node* TopNode = Stack->Top;

	if (Stack->List == Stack->Top) {
		Stack->List = NULL;
		Stack->Top = NULL;
	}
	else {
		Node* CurrentTop = Stack->List;
		while (CurrentTop != NULL && CurrentTop->NextNode != Stack->Top) {
			CurrentTop = CurrentTop->NextNode;
		}

		Stack->Top = CurrentTop;
		Stack->Top->NextNode = NULL;
	}

	return TopNode;
}

Node* LLS_Top(LinkedListStack* Stack) {
	return Stack->Top;
}

int LLS_GetSize(LinkedListStack* Stack) {

	int Count = 0;
	Node* Current = Stack->List;

	while (Current != NULL) {
		Current = Current->NextNode;
		Count++;
	}

	return Count;
}

int LLS_IsEmpty(LinkedListStack* Stack) {
	return (Stack->List == NULL);
}

int main(void) {

	int Count = 0;
	Node* Popped;
	
	LinkedListStack* Stack;
	LLS_CreateStack(&Stack);

	LLS_Push(Stack, LLS_CreateNode("abc"));
	LLS_Push(Stack, LLS_CreateNode("def"));
	LLS_Push(Stack, LLS_CreateNode("efg"));
	LLS_Push(Stack, LLS_CreateNode("hij"));

	Count = LLS_GetSize(Stack);
	printf("Size: %d, Top: %s\n\n", Count, LLS_Top(Stack)->data);

	for (int i = 0; i < Count; i++) {
		if (LLS_IsEmpty(Stack)) break;

		Popped = LLS_Pop(Stack);

		printf("Popped: %s, ", Popped->data);

		LLS_DestroyNode(Popped);

		if (!LLS_IsEmpty(Stack)) printf("Current Top: %s\n", LLS_Top(Stack)->data);
		else printf("Stack Is Empty.\n");
	}

	LLS_DestroyStack(Stack);

	return 0;
}
