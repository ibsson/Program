#include <stdio.h>
#include <stdlib.h>

typedef struct tagNode {
	int data;
	struct tagNode* PrevNode;
	struct tagNode* NextNode;
}Node;

Node* DLL_CreateNode(int Newdata) {

	Node* NewNode = (Node*)malloc(sizeof(Node));

	NewNode->data = Newdata;
	NewNode->PrevNode = NULL;
	NewNode->NextNode = NULL;

	return NewNode;
}

void DLL_DestroyNode(Node* Node) {
	free(Node);
}

void DLL_AppendNode(Node** Head, Node* NewNode) {
	
	if ((*Head) == NULL) {
		*Head = NewNode;
	}
	else {
		Node* Tail = (*Head);
		while (Tail->NextNode != NULL) {
			Tail = Tail->NextNode;
		}

		Tail->NextNode = NewNode;
		NewNode->PrevNode = Tail;
	}
}

void DLL_InsertAfter(Node* Current, Node* NewNode) {

	NewNode->NextNode = Current->NextNode;
	NewNode->PrevNode = Current;

	if (Current->NextNode != NULL) {
		Current->NextNode->PrevNode = NewNode;
		Current->NextNode = NewNode;
	}
}

void SLL_InsertNewHead(Node** Head, Node* NewHead) {

	if (Head == NULL) {
		(*Head) = NewHead;
	}
	else {
		NewHead->NextNode = (*Head);
		(*Head) = NewHead;
	}
}

void DLL_RemoveNode(Node** Head, Node* Remove) {

	if (*Head == Remove) {
		*Head = Remove->NextNode;
		if ((*Head) != NULL) (*Head)->PrevNode = NULL;

		Remove->PrevNode = NULL;
		Remove->NextNode = NULL;
	}
	else {
		Node* Temp = Remove;
		
		if (Remove->PrevNode != NULL) Remove->PrevNode->NextNode = Temp->NextNode;

		if (Remove->NextNode != NULL) Remove->NextNode->PrevNode = Temp->PrevNode;

		Remove->PrevNode = NULL;
		Remove->NextNode = NULL;
	}
}

Node* DLL_GetNodeAt(Node* Head, int Location) {

	Node* Current = Head;

	while (Current != NULL && Location > 0) {
		Current = Current->NextNode;
		Location--;
	}

	return Current;
}

int DLL_GetNodeCount(Node* Head) {

	unsigned int Count = 0;
	Node* Current = Head;

	while (Current != NULL) {
		Current = Current->NextNode;
		Count++;
	}

	return Count;
}

void PrintNode(Node* _Node) {

	if (_Node->PrevNode == NULL) printf("Prev: NULL");
	else {
		printf("Prev: %d", _Node->PrevNode->data);

		printf("Current: %d", _Node->data);
	}

	if (_Node->NextNode == NULL) printf("Next: NULL\n");
	else printf("Next: %d\n", _Node->NextNode->data);
}

int main(void) {

	int Count = 0;
	Node* List = NULL;
	Node* Current = NULL;
	Node* NewNode = NULL;

	for (int i = 0; i < 5; i++) {
		NewNode = DLL_CreateNode(i);
		DLL_AppendNode(&List, NewNode);
	}

	Count = DLL_GetNodeCount(List);

	for (int i = 0; i < Count; i++) {
		Current = DLL_GetNodeAt(List, i);
		printf("List[%d] : %d\n", i, Current->data);
	}

	printf("\nInserting 3000 After [2]...\n\n");

	Current = DLL_GetNodeAt(List, 2);
	NewNode = DLL_CreateNode(3000);
	DLL_InsertAfter(Current, NewNode);

	Count = DLL_GetNodeCount(List);

	for (int i = 0; i < Count; i++) {
		Current = DLL_GetNodeAt(List, i);
		printf("List[%d] : %d\n", i, Current->data);
	}

	printf("\nDestroying List...\n");

	Count = DLL_GetNodeCount(List);

	for (int i = 0; i < Count; i++) {
		Current = DLL_GetNodeAt(List, 0);

		if (Current != NULL) {
			DLL_RemoveNode(&List, Current);
			DLL_DestroyNode(Current);
		}
	}

	return 0;
}
