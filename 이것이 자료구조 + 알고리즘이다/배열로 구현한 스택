//복습 코드 #2

#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
	int data;
}Node;

typedef struct ArrayStack {
	int capacity;
	int top;
	Node* Nodes; //노드 배열
}ArrayStack;

void Create_Node(ArrayStack** Stack, int Capacity) {

	(*Stack) = (ArrayStack*)malloc(sizeof(ArrayStack));
	(*Stack)->Nodes = (Node*)malloc(sizeof(Node) * Capacity);

	(*Stack)->capacity = Capacity;
	(*Stack)->top = -1;
}

void Push(ArrayStack* Stack, int Data) {

	Stack->top++;
	Stack->Nodes[Stack->top].data = Data;
}

int Pop(ArrayStack* Stack) {

	int tmp = 0;

	tmp = Stack->Nodes[Stack->top].data;
	
	Stack->top--;

	return tmp;
}

int Get_Top(ArrayStack* Stack) {

	return Stack->Nodes[Stack->top].data;
}

int main(void) {

	ArrayStack* Stack = NULL;

	Create_Node(&Stack, 10);

	Push(Stack, 3);
	Push(Stack, 37);
	Push(Stack, 11);
	Push(Stack, 12);

	printf("Capacity: %d, Size: %d, Top: %d\n\n", Stack->capacity, (Stack->top + 1), Get_Top(Stack));

	for (int i = 0; i < 4; i++) {
		printf("Popped: %d, ", Pop(Stack));

		if (Stack->top != -1) printf("Current Top: %d\n", Get_Top(Stack));
		else if (Stack->top == -1) {
			printf("Stack Is Empty.\n");
			break;
		}
	}

	return 0;
}

//복습 코드 #1

#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
	int data;
}Node;

typedef struct Stack {
	int capacity;
	int top;
	Node* Nodes;
}ArrayStack;

void Create_Node(ArrayStack** Stack, int Capacity) {

	(*Stack) = (ArrayStack*)malloc(sizeof(ArrayStack));
	(*Stack)->Nodes = (Node*)malloc(sizeof(ArrayStack) * Capacity);

	(*Stack)->capacity = Capacity;
	(*Stack)->top = -1;
}

void Push(ArrayStack* Stack, int Data) {

	Stack->top++;
	Stack->Nodes[Stack->top].data = Data;
}

int Pop(ArrayStack* Stack) {

	int Position = Stack->top;
	Stack->top--;

	return Stack->Nodes[Position].data;
}

int Get_Size(ArrayStack* Stack) {

	return Stack->top + 1;
}

int Top(ArrayStack* Stack) {

	return Stack->Nodes[Stack->top].data;
}

int IsEmpty(ArrayStack* Stack) {
	return Stack->top;
}

int main(void) {

	ArrayStack* Stack = NULL;

	Create_Node(&Stack, 10);

	Push(Stack, 3);
	Push(Stack, 37);
	Push(Stack, 11);
	Push(Stack, 12);

	printf("Capacity: %d, Size: %d, Top: %d\n\n", Stack->capacity, Get_Size(Stack), Top(Stack));

	for (int i = 0; i < 4; i++) {
		printf("Popped: %d ", Pop(Stack));

		if (IsEmpty(Stack) != -1) {
			printf("Current Top: %d\n", Top(Stack));
		}
		else {
			printf("Stack is Empty\n");
			break;
		}
	}

	return 0;
}


/*
#include <stdio.h>
#include <stdlib.h>

typedef struct tagNode {
	int data;
}Node;

typedef struct tagArrayStack {
	int Capacity;
	int Top;
	Node* Nodes;
}ArrayStack;

void AS_CreateStack(ArrayStack** Stack, int Capacity) {
	(*Stack) = (ArrayStack*)malloc(sizeof(ArrayStack));

	(*Stack)->Nodes = (Node*)malloc(sizeof(Node) * Capacity);

	(*Stack)->Capacity = Capacity;
	(*Stack)->Top = -1;
}

void AS_DestroyStack(ArrayStack* Stack) {
	free(Stack->Nodes);

	free(Stack);
}

void AS_Push(ArrayStack* Stack, int data) {
	Stack->Top++;
	Stack->Nodes[Stack->Top].data = data;
}

int AS_Pop(ArrayStack* Stack) {
	int Position = Stack->Top;
	(Stack->Top--);
	return Stack->Nodes[Position].data;
}

int AS_Top(ArrayStack* Stack) {
	return Stack->Nodes[Stack->Top].data;
}

int AS_GetSize(ArrayStack* Stack) {
	return Stack->Top + 1;
}

int AS_IsEmpty(ArrayStack* Stack) {
	return(Stack->Top == -1);
}

int main(void) {
	int i = 0;
	ArrayStack* Stack = NULL;

	AS_CreateStack(&Stack, 10);

	AS_Push(Stack, 3);
	AS_Push(Stack, 37);
	AS_Push(Stack, 11);
	AS_Push(Stack, 12);

	printf("Capacity: %d, Size: %d, Top: %d\n\n", Stack->Capacity, AS_GetSize(Stack), AS_Top(Stack));

	for (int i = 0; i < 4; i++) {
		if (AS_IsEmpty(Stack)) break;

		printf("Popped: %d, ", AS_Pop(Stack));

		if (!AS_IsEmpty(Stack)) printf("Current Top %d\n", AS_Top(Stack));
		else printf("Stack Is Empty.\n");
	}

	AS_DestroyStack(Stack);

	return 0;
}
*/
