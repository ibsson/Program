//성능 향상

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

#define MAX 1001
#define INF 1000000000

int N, M;
vector <pair<int, int>> v[MAX];
int dist[MAX];

void dijkstra(int start, int finish) {
	priority_queue <pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
	dist[start] = 0;
	pq.push({ 0, start });

	while (!pq.empty()) {
		int w = pq.top().first;
		int x = pq.top().second;
		pq.pop();

		if (dist[x] < w) continue; //이미 갱신된 노드는 검사하지 않음 (이미 더 작은 값으로 갱신되기 전에 먼저 우선순위큐에 들어가있던 노드는  넘어감)

		for (int i = 0; i < v[x].size(); i++) {
			int nw = v[x][i].second;
			int nx = v[x][i].first;

			if (dist[nx] > nw + w) {
				dist[nx] = nw + w;
				pq.push({ dist[nx], nx });
			}
		}
	}
}

int main(void) {

	cin >> N;
	cin >> M;

	int from = 0, to = 0, w = 0;

	for (int i = 0; i < M; i++) {
		cin >> from >> to >> w;

		v[from].push_back({ to, w });
	}

	fill(dist + 1, dist + (N + 1), INF);

	int start = 0, finish = 0;

	cin >> start >> finish;

	dijkstra(start, finish);

	cout << dist[finish] << "\n";

	return 0;
}

/*
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

#define INF 1000000000
#define MAX 20002

int V, E, K;
int dist[MAX];
vector <pair<int, int>> v[MAX];

void Dijkstra(int start) {
	priority_queue <pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
	dist[start] = 0;
	pq.push({ 0, start });

	while (!pq.empty()) {
		int w_x = pq.top().first;
		int x = pq.top().second;
		pq.pop();

		for (int i = 0; i < v[x].size(); i++) {
			int next_w = v[x][i].second;
			int next = v[x][i].first;

			if (dist[next] > w_x + next_w) {
				dist[next] = w_x + next_w;
				pq.push({ dist[next], next });
			}
		}
	}
}

int main(void) {

	cin >> V >> E;
	cin >> K;

	int from = 0, to = 0, w = 0;

	for (int i = 0; i < E; i++) {
		cin >> from >> to >> w;

		v[from].push_back({ to, w });
	}

	fill(dist + 1, dist + (V + 1), INF);

	Dijkstra(K);

	for (int i = 1; i <= V; i++) {
		if (dist[i] == INF) {
			cout << "INF" << "\n";
		}
		else {
			cout << dist[i] << "\n";
		}
	}

	return 0;
}
*/

/*
다익스트라 알고리즘의 작동 과정
1. 도달하는데 가중치가 가장 "적게" 드는 정점을 찾는다.
2. 해당 정점에 대해 그 정점을 지나 이웃 정점들까지 이동하는데 드는 가중치를 조사한다.
3. 이 과정을 모든 정점에 대해서 반복한다.
4. 최종 경로를 계산한다.

priority_queue STL을 사용할때 greater<>를 사용하면 가장 작은 값이 우선순위를 갖게 되어 최소 힙으로 동작한다.
*/
