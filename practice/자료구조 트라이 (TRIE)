#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

struct TrieNode {
    bool isEndOfWord;
    TrieNode* children[10];

    TrieNode() {
        isEndOfWord = false;
        for (int i = 0; i < 10; i++) {
            children[i] = nullptr;
        }
    }
};

class Trie {
public:
    TrieNode* root;

    Trie() {
        root = new TrieNode();
    }

    ~Trie() {
        clear(root);
    }

    void clear(TrieNode* node) {
        for (int i = 0; i < 10; i++) {
            if (node->children[i]) {
                clear(node->children[i]);
            }
        }
        delete node;
    }

    bool insert(string number) {
        TrieNode* node = root;

        for (char ch : number) {
            int idx = ch - '0';

            if (!node->children[idx]) {
                node->children[idx] = new TrieNode();
            }
            node = node->children[idx];
            
            if (node->isEndOfWord) return false;
        }
        
        for (int i = 0; i < 10; i++) {
            if (node->children[i]) return false;
        }
        
        node->isEndOfWord = true;

        return true;
    }
};

bool isConsistent(vector<string> phoneNumbers) {
    Trie trie;

    for (string number : phoneNumbers) {
        if (!trie.insert(number)) {
            return false;
        }
    }

    return true;
}

int main() {
    int t;
    cin >> t;

    while (t--) {
        int n;
        cin >> n;

        vector<string> phoneNumbers(n);

        for (int i = 0; i < n; i++) {
            cin >> phoneNumbers[i];
        }

        sort(phoneNumbers.begin(), phoneNumbers.end());

        if (isConsistent(phoneNumbers)) {
            cout << "YES\n";
        }
        else {
            cout << "NO\n";
        }
    }

    return 0;
}
