#include <iostream>
using namespace std;

int Blocks[7][4][4][4] = {
{{1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0},{1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0}, //네모
 {1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0},{1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0}},
{{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0}, //직선 
 {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0}},
{{1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0},{0,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0}, //지렁이 모양
 {1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0},{0,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0}},
{{0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0},{1,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0}, //반대 지렁이 모양
 {0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0},{1,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0}},
{{1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0},{1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0}, //반대 ㄴ모양
 {0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0},{1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0}},
{{1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0},{1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0}, //ㄴ모양
 {1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0},{0,1,0,0,0,1,0,0,1,1,0,0,0,0,0,0}},
{{1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0},{1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0}, //산모양
 {0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0},{0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0}}
};

int N, M;
int Paper[501][501];
int Block_Pos[4][2];

void Get_Pos(int b_type, int b_rotation) {
	int tmp = 0;

	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			if (Blocks[b_type][b_rotation][i][j] == 1) {
				Block_Pos[tmp][0] = j;
				Block_Pos[tmp][1] = i;
				tmp++;
			}
		}
	}
}

int main(void) {

	cin >> N >> M;

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> Paper[i][j];
		}
	}

	int sum = 0, result = 0;

	for (int i = 0; i < 7; i++) {
		for (int j = 0; j < 4; j++) {
			Get_Pos(i, j);

			for (int k = 0; k < N; k++) {
				for (int l = 0; l < M; l++) {
					for (int m = 0; m < 4; m++) {
						if (k + Block_Pos[m][1] >= N) break;

						if (l + Block_Pos[m][0] >= M) break;

						sum += Paper[k + Block_Pos[m][1]][l + Block_Pos[m][0]];
					}

					result = max(result, sum);
					sum = 0;
				}
			}
		}
	}

	cout << result << "\n";

	return 0;
}
