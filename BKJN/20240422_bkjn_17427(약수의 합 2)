#include <stdio.h>

long int get_divisor_sum(int num) {

	long int sum = 0;

	for (int i = 1; i <= num; i++) {
		sum += (num / i) * i;
	}

	return sum;
}

int main(void) {

	int N = 0;

	scanf("%d", &N);

	printf("%ld\n", get_divisor_sum(N));

	return 0;
}

/* 3번
#include <stdio.h>

int get_divisor_sum(int num) {

	int sum = 0;
	int i;

	for (i = 1; i * i < num; i++) { //제곱근 활용
		if (num % i == 0) {
			sum += i;
			sum += num / i;
		}
	}

	if (i * i == num) sum += i;

	return sum;
}

int main(void) {

	int N = 0, tmp = 0, sum = 0;

	scanf("%d", &N);

	for (int i = 1; i <= N; i++) {
		tmp = get_divisor_sum(i);

		sum += tmp;
	}

	printf("%d\n", sum);

	return 0;
}
*/

/* 2번
#include <stdio.h>

int get_divisor_sum(int num) {

	int sum = 0;

	for (int i = 1; i <= (num / 2); i++) {
		if (num % i == 0) {
			sum += i;
		}
	}

	sum += num;

	return sum;
}

int main(void) {

	int N = 0, tmp = 0, sum = 0;

	scanf("%d", &N);

	for (int i = 1; i <= N; i++) {
		tmp = get_divisor_sum(i);

		sum += tmp;
	}

	printf("%d\n", sum);

	return 0;
}
*/

/* 1번
#include <stdio.h>

int get_divisor_sum(int num) {

	int sum = 0;

	for (int i = 1; i <= num; i++) {
		if (num % i == 0) {
			sum += i;
		}
	}

	return sum;
}

int main(void) {

	int N = 0, tmp = 0, sum = 0;

	scanf("%d", &N);

	for (int i = 1; i <= N; i++) {
		tmp = get_divisor_sum(i);

		sum += tmp;
	}

	printf("%d\n", sum);

	return 0;
}
*/

/*
처음에는 그냥 약수를 구하는 방법, 약수를 구할때 범위를 절반 이하까지로 설정하는 방법, 제곱근을 이용하는 방법을 이용해서 약수를 구하려고 했지만 시간초과가 떠서
약수를 그냥 구하면 안되겠구나 라고 생각을 해서 검색을 해 보았다. 
(n//i)는 약수가 등장하는 횟수이다.(즉, n 이하의 정수 중 i의 배수의 갯수. 그럼 자동으로 i는 약수가 되니까.) 
이에 약수 본인을 곱하면 N 이하의 정수에서 해당 약수의 합을 구할 수 있다. 
를 이용해서 풀었다. 어떻게 이런 생각을 해내는지 신기한 것 같다. 그리고 마지막에 코드를 다 짰는데 자료형을 출력할때 %ld를 써주지 않은걸 파악하지 못해 시간을 많이 날렸다.
앞으로는 자료형을 보낼때와 출력할 때 맞춰주는 기본적인 것을 실수하지 않도록 항상 인지하고 있어야겠다.
*/
