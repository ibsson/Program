#include <iostream>
#include <algorithm>
using namespace std;

int dp[1000][3] = {0};

int Get_Result(int n);

int main(void) {

	int N = 0;

	cin >> N;

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < 3; j++) {
			cin >> dp[i][j];
		}
	}

	cout << Get_Result(N) << endl;

	return 0;
}

int Get_Result(int n) {

	for (int i = 1; i < n; i++) {
		dp[i][0] += min(dp[i - 1][1], dp[i - 1][2]);
		dp[i][1] += min(dp[i - 1][0], dp[i - 1][2]);
		dp[i][2] += min(dp[i - 1][0], dp[i - 1][1]);
	}

	int result = min({ dp[n - 1][0], dp[n - 1][1], dp[n - 1][2] });

	return result;
}

/*
처음에는 재귀함수로 풀어봤는데 역시나 시간초과가 났다.
그래서 dp로 풀었더니 맞았다.
이 문제에서 min함수에서 인수를 한번에 3개를 비교하는 방법을 알게되었다.
*/
