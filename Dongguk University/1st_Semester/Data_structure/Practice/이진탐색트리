#include <stdio.h>
#include <stdlib.h>

typedef struct treeNode {
	char key;
	struct treeNode* left;
	struct treeNode* right;
}treeNode;

void displayInorder(treeNode* root);
treeNode* makeNode(char x, treeNode* leftNode, treeNode* rightNode);
treeNode* insertNode(treeNode* p, char x);
treeNode* searchNode(treeNode* root, char x);
void deleteNode(treeNode* root, char key);

void displayInorder(treeNode* root) {
	if (root) {
		displayInorder(root->left);
		printf("%c_", root->key);
		displayInorder(root->right);
	}
}

treeNode* searchNode(treeNode* root, char x) {
	treeNode* p;
	p = root;

	while (p != NULL) {
		if (x < p->key) p = p->left;
		else if (x == p->key) return p;
		else p = p->right;
	}

	printf("\n 찾는 키가 없습니다!");

	return p;
}

treeNode* makeNode(char x, treeNode* leftNode, treeNode* rightNode) {
	treeNode* newNode = (treeNode*)malloc(sizeof(treeNode));
	newNode->key = x;
	newNode->left = leftNode;
	newNode->right = rightNode;

	return newNode;
}

treeNode* insertNode(treeNode* p, char x) {
	treeNode* newNode;

	if (p == NULL) {
		p = makeNode(x, NULL, NULL);
		return p;
	}
	else if (x < p->key) p->left = insertNode(p->left, x);
	else if (x > p->key) p->right = insertNode(p->right, x);
	else printf("\n이미 같은 키가 있습니다\n");

	return p; //그 전과 똑같은 포인터를 가리키게 해줘서 그대로 유지됨
}

void deleteNode(treeNode* root, char key) {
	treeNode* parent, * p, * succ, * succ_parent; //succ = 후계자, succ_parent = 후계자 부모
	treeNode* child;

	parent = NULL;
	p = root;

	if ((p != NULL) && (p->key != key)) {
		parent = p;
		if (p->key < key) {
			p = p->left;
		}
		else {
			p = p->right;
		}
	}

	if (p == NULL) {
		printf("\n 해당 키값이 없습니다\n");
		return;
	}

	if ((p->left == NULL) && (p->right == NULL)) {
		if (parent != NULL) {
			if (parent->left == p) parent->left = NULL;
			else parent->right = NULL;
		}
		else root = NULL;
	}
	else if ((p->left == NULL) || (p->right == NULL)) {
		if (p->left != NULL) child = p->left;
		else child = p->right;

		if (parent != NULL) {
			if (parent->left == p) parent->left = child;
			else parent->right = child;
		}
		else root = child;
	}
	else {
		succ_parent = p;
		succ = p->left;

		while (succ->right != NULL) {
			succ_parent = succ;
			succ = succ->right;
		}

		if (succ_parent->left == succ) succ_parent->left = succ->left;
		else succ_parent->right = succ->left;

		p->key = succ->key;
		p = succ;
	}

	free(p);
}

int main() {



	return 0;
}
