#include <stdio.h>
#include <stdlib.h>
#define MAX 30

typedef struct graphNode {
	int vertex;
	struct graphNode* link;
}graphNode;

typedef struct graphType {
	int n;
	graphNode* List[MAX];
	int visited[MAX];
}graphType;

typedef struct QNode {
	int data;
	struct QNode* link;
}QNode;

typedef struct QueueType {
	QNode* front, * rear;
}QueueType;

QueueType* createQueue() {
	QueueType* Q = (QueueType*)malloc(sizeof(QueueType));
	Q->front = NULL;
	Q->rear = NULL;

	return Q;
}

int isEmpty(QueueType* Q) {
	if (Q->front == NULL) {
		printf("큐가 비어있음\n");
		return 1;
	}
	else return 0;
}

void enqueue(QueueType* Q, int item) {
	QNode* newNode = (QNode*)malloc(sizeof(QNode));
	newNode->data = item;
	newNode->link = NULL;

	if (Q->front == NULL) {
		Q->front = newNode;
		Q->rear = newNode;
	}
	else {
		Q->rear->link = newNode;
		Q->rear = newNode;
	}
}

int dequeue(QueueType* Q) {
	QNode* old = Q->front;
	int item;

	if (isEmpty(Q)) return 0;
	else {
		item = old->data;
		Q->front = Q->front->link;

		if (Q->front == NULL) {
			Q->rear = NULL;
		}

		free(old);

		return item;
	}
}

void createGraph(graphType* g) {
	g->n = 0;
	for (int v = 0; v < MAX; v++) {
		g->List[v] = NULL;
		g->visited[v] = 0;
	}
}

void insertVertex(graphType* g) {
	if (((g->n) + 1) > MAX) {
		printf("\n 가득참\n");
		return;
	}

	g->n++;
}

void insertEdge(graphType* g, int from, int to) {
	if (from >= g->n || to >= g->n) {
		printf("없는 정점\n");
		return;
	}

	graphNode* node = (graphNode*)malloc(sizeof(graphNode));
	node->vertex = to;
	node->link = g->List[from];
	g->List[from] = node;
}

void printList(graphType* g) {
	graphNode* p;

	for (int i = 0; i < g->n; i++) {
		printf("\n%d의 인접리스트\n", i);
		p = g->List[i];

		while (p) {
			printf(" %d", p->vertex);
			p = p->link;
		}
	}
}

void BFS(graphType* g, int v) {
	graphNode* w;
	QueueType* Q;
	Q = createQueue();
	g->visited[v] = 1;
	printf(" %d", v);
	enqueue(Q, v);

	while (!isEmpty(Q)) {
		v = dequeue(Q);
		for (w = g->List[v]; w; w = w->link) {
			if (g->visited[w->vertex] == 0) {
				g->visited[w->vertex] = 1;
				printf(" %d", w->vertex);
				enqueue(Q, w->vertex);
			}
		}
	}
}

int main() {
	graphType* G1 = (graphType*)malloc(sizeof(graphType));

	createGraph(G1);
	for (int i = 0; i < 7; i++) {
		insertVertex(G1);
	}

	insertEdge(G1, 0, 2);
	insertEdge(G1, 0, 1);
	insertEdge(G1, 1, 4);
	insertEdge(G1, 1, 3);
	insertEdge(G1, 1, 0);
	insertEdge(G1, 2, 4);
	insertEdge(G1, 2, 0);
	insertEdge(G1, 3, 6);
	insertEdge(G1, 3, 1);
	insertEdge(G1, 4, 6);
	insertEdge(G1, 4, 2);
	insertEdge(G1, 4, 1);
	insertEdge(G1, 5, 6);
	insertEdge(G1, 6, 5);
	insertEdge(G1, 6, 4);
	insertEdge(G1, 6, 3);

	printf("\n 인접리스트 출력\n");
	printList(G1);

	printf("\nBFS\n");
	BFS(G1, 0);

	return 0;
}
